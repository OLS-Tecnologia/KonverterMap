name: Create Tag and Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔍 Ler versão do .csproj
        id: version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" src/KonverterMap/KonverterMap.csproj)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🔁 Verificar se tag já existe
        id: check_tag
        run: |
          git fetch --tags
          if git tag | grep -q "v${{ steps.version.outputs.version }}"; then
            echo "Tag já existe"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Criar tag no repositório
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: 📝 Gerar changelog (últimos commits)
        id: changelog
        run: |
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🚀 Criar release no GitHub
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body: |
            🔄 Versão automática publicada

            📋 Mudanças:
            ${{ steps.changelog.outputs.changelog }}
            
      - name: 📦 Empacotar para NuGet
        run: dotnet pack Konverter.sln --no-build --configuration Release

      - name: 🚀 Publicar no NuGet
        run: dotnet nuget push **/KonverterMap.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
