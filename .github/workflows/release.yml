name: Create Tag, Release and Publish to NuGet

on:
  push:
    branches: [ master ]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # necessário para pegar histórico completo

      - name: 🛠️ Instalar .NET
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '8.0.x'

      - name: 🔍 Ler versão do .csproj
        id: version
        run: |
          VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" src/KonverterMap/KonverterMap.csproj)
          echo "Versão encontrada: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🔁 Verificar se a tag já existe
        id: check_tag
        run: |
          git fetch --tags
          if git tag | grep -q "v${{ steps.version.outputs.version }}"; then
            echo "Tag já existe"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Criar tag automaticamente
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: 📝 Gerar changelog dos commits
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s")
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s")
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📦 Restaurar dependências
        run: dotnet restore Konverter.sln

      - name: 🧱 Compilar projeto
        run: dotnet build Konverter.sln --no-restore --configuration Release

      - name: 📦 Empacotar para NuGet
        run: dotnet pack Konverter.sln --no-build --configuration Release

      - name: 🚀 Publicar no NuGet
        run: dotnet nuget push **/KonverterMap.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

      - name: 🗒️ Criar release no GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body: |
            🔄 Versão automática publicada: `v${{ steps.version.outputs.version }}`

            ### 📋 Mudanças:
            ${{ steps.changelog.outputs.changelog }}
      
      - name: 📝 Atualizar changelog da documentação
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          echo "# 📋 Changelog" > docs/changelog.md
          echo -e "\nTodas as alterações feitas neste projeto estão listadas abaixo.\n\n---\n" >> docs/changelog.md
          git log --pretty=format:'## %h - %ad%n- %s%n' --date=short >> docs/changelog.md
      
      - name: 🔄 Commit do changelog.md atualizado
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add docs/changelog.md
          git commit -m "🔄 Atualiza changelog da documentação"
          git push
